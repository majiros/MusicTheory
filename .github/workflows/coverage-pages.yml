name: coverage-pages

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build-and-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build -c Release --nologo

      - name: Test (coverage)
        run: |
          dotnet test -c Release --nologo --no-build \
            --results-directory Tests/MusicTheory.Tests/TestResults \
            --collect 'XPlat Code Coverage' -- \
            DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Install ReportGenerator (local tool path)
        run: |
          dotnet tool install --tool-path ./tools dotnet-reportgenerator-globaltool
          ls -la ./tools || true

      - name: Debug PATH and coverage files
        run: |
          which dotnet || true
          echo "PATH=$PATH"
          ls -la $HOME/.dotnet/tools || true
          ls -R Tests/MusicTheory.Tests/TestResults || true

      - name: Generate coverage report (Html/XmlSummary/Badges)
        run: |
          ./tools/reportgenerator \
            -reports:"Tests/MusicTheory.Tests/TestResults/**/coverage.cobertura.xml" \
            -targetdir:"site/coverage" \
            -reporttypes:"Html;XmlSummary;Badges"

      - name: Enforce Coverage >= 75% before publish
        shell: bash
        run: |
          # Parse line coverage from Summary.xml
          coverage=$(grep -oP '(?<=<Linecoverage>)[0-9.]+' site/coverage/Summary.xml)
          threshold=75.0

          echo "Line coverage: ${coverage}% (threshold: ${threshold}%)"

          # Compare using bc (basic calculator)
          if (( $(echo "$coverage < $threshold" | bc -l) )); then
            echo "❌ Coverage below threshold."
            exit 1
          fi

          echo "✅ Coverage check passed!"

      - name: Prepare site index
        run: |
          mkdir -p site
          cp Scripts/PagesIndex.html site/index.html
          # keep badge path stable at /badge_linecoverage.svg
          cp site/coverage/badge_linecoverage.svg site/badge_linecoverage.svg
          # also publish branch/method badges at site root for README badges
          if [ -f site/coverage/badge_branchcoverage.svg ]; then cp site/coverage/badge_branchcoverage.svg site/badge_branchcoverage.svg; fi
          if [ -f site/coverage/badge_methodcoverage.svg ]; then cp site/coverage/badge_methodcoverage.svg site/badge_methodcoverage.svg; fi
          # optional combined badge
          if [ -f site/coverage/badge_combined.svg ]; then cp site/coverage/badge_combined.svg site/badge_combined.svg; fi

      - name: Upload Pages artifact (site)
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build-and-coverage
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


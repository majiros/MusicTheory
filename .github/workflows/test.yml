name: Test & Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build (Release)
      run: dotnet build -c Release --no-restore
      
    - name: Run tests
      run: dotnet test -c Release --no-build --verbosity normal
      
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build (Release)
      run: dotnet build -c Release --no-restore
      
    - name: Run tests with coverage
      run: |
        dotnet test -c Release --no-build --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage
      env:
        COMPlus_TieredCompilation: 0
        COMPlus_ReadyToRun: 0
        
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Generate coverage report
      run: |
        reportgenerator \
          -reports:./coverage/**/coverage.cobertura.xml \
          -targetdir:./coverage-report \
          -reporttypes:"Html;XmlSummary;Badges;Cobertura"
          
    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(grep -oPm1 "(?<=<coverage line-rate=\")[^\"]*" ./coverage-report/Cobertura.xml || echo "0")
        COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l | xargs printf "%.1f")
        echo "percentage=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE_PERCENT%"
        
    - name: Check coverage threshold (75%)
      run: |
        COVERAGE=${{ steps.coverage.outputs.percentage }}
        THRESHOLD=75.0
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE% is below threshold $THRESHOLD%"
          exit 1
        else
          echo "‚úÖ Coverage $COVERAGE% meets threshold $THRESHOLD%"
        fi
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage-report
        retention-days: 30
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.percentage }}';
          const comment = `## üìä Code Coverage Report
          
          **Coverage:** ${coverage}%
          **Threshold:** 75.0%
          **Status:** ${coverage >= 75.0 ? '‚úÖ PASS' : '‚ùå FAIL'}
          
          [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
